# -*- coding: utf-8 -*-
"""Artificial_neural_network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rynUWkVLwJTo-n0Rt5byda3ZZQxEj8Ao

# Artificial Neural Network

### Importing the libraries
"""

#!pip install numpy
#!pip install pandas
#!pip install matplotlib
#!pip install tensorflow
#!pip install sklearn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:-1]
y = dataset.iloc[:, -1]

print(X)

print(y)

"""### Encoding categorical data

Label Encoding the "Gender" column
"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
#X[:, 2] = le.fit_transform(X[:, 2])
X.loc[:, 'Gender'] = le.fit_transform(X.loc[:, 'Gender'])

print(X)

"""One Hot Encoding the "Geography" column"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = ct.fit_transform(X)

print(X)

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""### Feature Scaling

**Note**: Scaling is a critical step to Neural Networks, so we always scale!
"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""## Part 2 - Building the ANN

### Initializing the ANN

Sequential Layer
"""

ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer

**Note**: More commonly, for the activation function we'll use:

*   Rectifier function for the hidden layer
*   Sigmoid function for the output layer
"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the second hidden layer"""

# "6 Nodes" has resulted in the best accuracy so far
ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the output layer

I have used "sigmoid" as it is a binary classification.
For multiclass, use "softmax" instead.
"""

ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

"""## Part 3 - Training the ANN

### Compiling the ANN

Understanding the parameters:

*   optimizer: updates the weights for better accuracy
*   loss: the loss function
  * binary_crossentropy: Binary classification:
  * categorical_crossentropy: Multiclass classification
"""

ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""### Training the ANN on the Training set"""

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

"""## Part 4 - Making the predictions and evaluating the model

### Predicting the result of a single observation

Let's use our ANN model to predict if the customer with the following informations will leave the bank: 

Geography: Senegal

Credit Score: 600

Gender: Male

Age: 40 years old

Tenure: 3 years

Balance: \$ 60000

Number of Products: 2

Does this customer have a credit card? Yes

Is this customer an Active Member: Yes

Estimated Salary: \$ 50000
"""

# Checking the position of the dummy variable
X[0]

dfX = pd.DataFrame(X, columns=['Senegal', 'Guinea', 'Canada',  'CreditScore', 'Gender',	'Age',	'Tenure',	'Balance',	'NumOfProducts',	'HasCrCard',	'IsActiveMember',	'EstimatedSalary'])
dfy = pd.DataFrame(y)
# concat by colmun (axis=1)
df = pd.concat([dfX, dfy], axis=1)

df

# Since we scaled the training set when training the algorithm, 
# we also have to scale the new test data
customer = [[1, 0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]]
customer_scaled = sc.transform(customer)
y_pred = ann.predict(customer_scaled)

print(y_pred)

"""**Conclusion**

There is less than 4% chances the customer will leave to bank.

Therefore, our ANN model predicts that this customer stays in the bank!

**Note:** The "predict" method always expects a 2D array as the format of its inputs hence the customer double brackets.

### Predicting the Test set results
"""

print(y_pred.reshape(1, -1))

y_pred = ann.predict(X_test)
y_pred = (y_pred > 0.5)

y_test_array = y_test.values

# reshaping on n rows - 1 column
y_pred_reshaped = y_pred.reshape(len(y_pred), 1)
y_test_reshaped = y_test_array.reshape(len(y_test),1)
y_pred_test = np.concatenate((y_pred_reshaped, y_test_reshaped), 1)
print(y_pred_test)

"""### Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""## Conclusion

Our ANN model has a pretty good accuracy of 86%.
Would you find a better one, please email me.

This project was a fun one! But it's also important as it helps improve the business by keeping more customers.
I am looking forward to take a more challenging one.

"""